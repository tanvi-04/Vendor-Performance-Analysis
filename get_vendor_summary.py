{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6f4dfcae-3215-4214-ac5d-912a668bbb65",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'ingest_db' from 'ingestion_db' (/Users/tanvipatel/Desktop/Vendor Performance Analysis/ingestion_db.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01msqlite3\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mlogging\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21;01mingestion_db\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ingest_db\n\u001b[1;32m      6\u001b[0m logging\u001b[38;5;241m.\u001b[39mbasicConfig(\n\u001b[1;32m      7\u001b[0m     filename\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlogs/get_vendor_summary.log\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m      8\u001b[0m     level\u001b[38;5;241m=\u001b[39mlogging\u001b[38;5;241m.\u001b[39mDEBUG,\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;28mformat\u001b[39m\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m%(asctime)s\u001b[39;00m\u001b[38;5;124m - \u001b[39m\u001b[38;5;132;01m%(levelname)s\u001b[39;00m\u001b[38;5;124m - \u001b[39m\u001b[38;5;132;01m%(message)s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m     10\u001b[0m     filemode\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     11\u001b[0m )\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21mcreate_vendor_summary\u001b[39m(conn):\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'ingest_db' from 'ingestion_db' (/Users/tanvipatel/Desktop/Vendor Performance Analysis/ingestion_db.py)"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import sqlite3\n",
    "import logging\n",
    "from ingestion_db import ingest_db\n",
    "\n",
    "logging.basicConfig(\n",
    "    filename=\"logs/get_vendor_summary.log\",\n",
    "    level=logging.DEBUG,\n",
    "    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n",
    "    filemode=\"a\"\n",
    ")\n",
    "\n",
    "def create_vendor_summary(conn):\n",
    "    '''this function will merge the different tables to get the overall vendor summary and adding new columns in the resultant data'''\n",
    "    vendor_sales_summary = pd.read_sql_query(\"\"\" WITH FreightSummary AS (\n",
    "    SELECT\n",
    "        VendorNumber,\n",
    "        SUM(Freight) as FreightCost\n",
    "    FROM vendor_invoice\n",
    "    GROUP BY VendorNumber\n",
    "    ),\n",
    "\n",
    "    PurchaseSummary AS (\n",
    "        SELECT\n",
    "            p.VendorNumber,\n",
    "            p.VendorName,\n",
    "            p.Brand,\n",
    "            p.Description,\n",
    "            p.PurchasePrice,\n",
    "            pp.Price as ActualPrice,\n",
    "            pp.Volume,\n",
    "            SUM(p.Quantity) as TotalPurchaseQuantity,\n",
    "            SUM(p.Dollars) as TotalPurchaseDollars\n",
    "        FROM purchases p\n",
    "        JOIN purchase_prices pp\n",
    "            ON p.Brand = pp.Brand\n",
    "        WHERE p.PurchasePrice > 0\n",
    "        GROUP BY p.VendorNumber, p.VendorName, p.Brand, p.Description, p.PurchasePrice, pp.Price, pp.Volume\n",
    "    ),\n",
    "    \n",
    "    SalesSummary AS (\n",
    "        SELECT\n",
    "            VendorNo,\n",
    "            Brand,\n",
    "            SUM(SalesQuantity) as TotalSalesQuantity,\n",
    "            SUM(SalesDollars) as TotalSalesDollars,\n",
    "            SUM(SalesPrice) as TotalSalesPrice,\n",
    "            SUM(ExciseTax) as TotalExciseTax\n",
    "        FROM sales\n",
    "        GROUP BY VendorNo, Brand\n",
    "    )\n",
    "    \n",
    "    SELECT\n",
    "        ps.VendorNumber,\n",
    "        ps.VendorName,\n",
    "        ps.Brand,\n",
    "        ps.Description,\n",
    "        ps.PurchasePrice,\n",
    "        ps.ActualPrice,\n",
    "        ps.Volume,\n",
    "        ps.TotalPurchaseQuantity,\n",
    "        ps.TotalPurchaseDollars,\n",
    "        ss.TotalSalesQuantity,\n",
    "        ss.TotalSalesDollars,\n",
    "        ss.TotalSalesPrice,\n",
    "        ss.TotalExciseTax,\n",
    "        fs.FreightCost\n",
    "    FROM PurchaseSummary ps\n",
    "    LEFT JOIN SalesSummary ss\n",
    "        ON ps.VendorNumber = ss.VendorNo\n",
    "        AND ps.Brand = ss.Brand\n",
    "    LEFT JOIN FreightSummary fs\n",
    "        ON ps.VendorNumber = fs.VendorNumber\n",
    "    ORDER BY ps.TotalPurchaseDollars DESC\"\"\", conn)\n",
    "\n",
    "    return vendor_sales_summary\n",
    "\n",
    "\n",
    "def clean_data(df):\n",
    "    '''this function will clean the data'''\n",
    "    # changing datatype to float\n",
    "    df['Volume'] = df['Volume'].astype('float64')\n",
    "\n",
    "    # filling missing values with 0\n",
    "    df.fillna(0, inplace = True)\n",
    "\n",
    "    # removing spaces from categorical data\n",
    "    df['VendorName'] = df['VendorName'].str.strip()\n",
    "    df['Description'] = df['Description'].str.strip()\n",
    "\n",
    "    # creating new columns for better analysis\n",
    "    vendor_sales_summary['GrossProfit'] = vendor_sales_summary['TotalSalesDollars'] - vendor_sales_summary['TotalPurchaseDollars']\n",
    "    vendor_sales_summary['ProfitMargin'] = (vendor_sales_summary['GrossProfit'] / vendor_sales_summary['TotalSalesDollars']) * 100\n",
    "    vendor_sales_summary['StockTurnOver'] = vendor_sales_summary['TotalSalesQuantity'] / vendor_sales_summary['TotalPurchaseQuantity']\n",
    "    vendor_sales_summary['SalesToPurchaseRatio'] = vendor_sales_summary['TotalSalesDollars'] / vendor_sales_summary['TotalPurchaseDollars']\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    # creating database connection\n",
    "    conn = sqlite3.connect('inventory.db')\n",
    "\n",
    "    logging.info('Creating Vendor Summary Table.....')\n",
    "    summary_df = create_vendor_summary(conn)\n",
    "    logging.info(summary_df.head())\n",
    "\n",
    "    logging.info('Cleaning Data.....')\n",
    "    clean_df = clean_data(summary_df)\n",
    "    loggging.info(clean_df.head())\n",
    "\n",
    "    logging.info('Ingesting Data.....')\n",
    "    ingest_db(clean_df,'vendor_sales_summary', conn)\n",
    "    logging.info('Completed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d584eedc-067d-4ad6-bf52-030c393f7ff4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
